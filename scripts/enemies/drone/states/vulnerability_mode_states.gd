class_name VulnerabilityModeStates
extends Node

@export var drone: Drone
@export var sc: StateChart
@export var proximity_detector: ShapeCast3D

enum State {INVULNERABLE = 0, DEFENDABLE = 1, VULNERABLE = 2}
var state: State = State.DEFENDABLE



func become_invulnerable() -> void:
	sc.send_event("defendable to invulnerable")


func become_defendable() -> void:
	sc.send_event("vulnerable to defendable")
	sc.send_event("invulnerable to defendable")


func become_vulnerable() -> void:
	sc.send_event("defendable to vulnerable")


#=======================================================
# STATES
#=======================================================

# invulnerable state
#----------------------------------------
func _on_invulnerable_state_entered() -> void:
	print("INVULNERABLE")
	state = State.INVULNERABLE


func _on_invulnerable_state_physics_processing(delta: float) -> void:
	proximity_detector.scan(false, true)


# defendable state
#----------------------------------------
func _on_defendable_state_entered() -> void:
	print("DEFENDABLE")
	state = State.DEFENDABLE


func _on_defendable_state_physics_processing(delta: float) -> void:
	proximity_detector.scan()


# vulnerable state
#----------------------------------------
func _on_vulnerable_state_entered() -> void:
	print("VULNERABLE")
	state = State.VULNERABLE


func _on_vulnerable_state_physics_processing(delta: float) -> void:
	proximity_detector.scan()
