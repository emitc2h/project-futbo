[gd_resource type="Shader" format=3 uid="uid://cpb5j5g4ss8rb"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec4 backlight : source_color;
uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_enable;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float sway_speed = 1.0;
uniform float sway_strength_x = 0.01;
uniform float sway_strength_y = 0.0;
uniform float sway_strength_z = 0.0;
uniform float sway_phase_len = 8.0;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;

	float strength_x = COLOR.r * sway_strength_x;
	float strength_y = COLOR.r * sway_strength_y;
	float strength_z = COLOR.r * sway_strength_z;

    VERTEX.x += sin(float(INSTANCE_ID) + VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed) * strength_x;
    VERTEX.y += sin(float(INSTANCE_ID) + VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412) * strength_y;
    VERTEX.z += sin(float(INSTANCE_ID) + VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123) * strength_z;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;

	// Backlight: Enabled
	vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb + backlight_tex);
}
"
